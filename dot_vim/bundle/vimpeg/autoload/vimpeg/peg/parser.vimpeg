; Original PEG syntax {{{
; # Hierarchical syntax
; Grammar <- Spacing Definition+ EndOfFile
; Definition <- Identifier LEFTARROW Expression
; Expression <- Sequence (SLASH Sequence)*
; Sequence <- Prefix*
; Prefix <- (AND / NOT)? Suffix
; Suffix <- Primary (QUESTION / STAR / PLUS)?
; Primary <- Identifier !LEFTARROW / OPEN Expression CLOSE / Literal / Class / DOT
; # Lexical syntax
; Identifier <- IdentStart IdentCont* Spacing
; IdentStart <- [a-zA-Z_]
; IdentCont <- IdentStart / [0-9]
; Literal <- [’] (![’] Char)* [’] Spacing / ["] (!["] Char)* ["] Spacing
; Class <- ’[’ (!’]’ Range)* ’]’ Spacing
; Range <- Char ’-’ Char / Char
; Char <- ’\\’ [nrt’"\[\]\\] / ’\\’ [0-2][0-7][0-7] / ’\\’ [0-7][0-7]?  / !’\\’ .
; LEFTARROW <- ’<-’ Spacing
; SLASH <- ’/’ Spacing
; AND <- ’&’ Spacing
; NOT <- ’!’ Spacing
; QUESTION <- ’?’ Spacing
; STAR <- ’*’ Spacing
; PLUS <- ’+’ Spacing
; OPEN <- ’(’ Spacing
; CLOSE <- ’)’ Spacing
; DOT <- ’.’ Spacing
; Spacing <- (Space / Comment)*
; Comment <- ’%’ (!EndOfLine .)* EndOfLine
; Space <- ’ ’ / ’\t’ / EndOfLine
; EndOfLine <- ’\r\n’ / ’\n’ / ’\r’
; EndOfFile <- !.
; }}}

; VimPEG grammar
.skip_white   = false
.namespace    = 'vimpeg#peg'
.parser_name  = 'parser'
.root_element = 'grammar'
.ignore_case  = false
.debug        = false
.verbose      = 0

grammar          ::= options ? definitions eof -> #grammar
definitions      ::= ( definition | eol ) + -> #definitions
definition       ::= identifier mallet expression callback ? eol -> #definition
expression       ::= sequence ( or sequence ) * -> #expression
sequence         ::= prefix * -> #sequence
prefix           ::= ( and | not ) ? suffix -> #prefix
suffix           ::= primary ( question | star | plus ) ? -> #suffix
primary          ::= identifier ! mallet   \
                   | open expression close \
                   | regex -> #primary
callback         ::= right_arrow '\%([a-zA-Z0-9_:.#]*\w\+\)\?' -> #callback
options          ::= ( option | eol ) + -> #options
option           ::= dot option_name equal option_value eol -> #option
option_name      ::= identifier
option_value     ::= dquoted_string \
                   | squoted_string \
                   | number         \
                   | boolean
identifier       ::= '\h\w*' space -> #identifier
regex            ::= dquoted_string \
                   | squoted_string -> #regex
dquoted_string   ::= dquote ( double_backslash \
                   | escaped_dquote            \
                   | '[^"]' ) * dquote space -> #dquoted_string
squoted_string   ::= squote ( "[^']" | double_squote ) * squote space \
                   -> #squoted_string
escaped_dquote   ::= backslash dquote -> #join
double_backslash ::= backslash backslash -> #join
backslash        ::= '\'
number           ::= '\%(0\|[1-9]\d*\)\%(\.\d\+\)\?' space -> #first
dquote           ::= '"'
double_squote    ::= "''"
squote           ::= "'"
comment          ::= ';[^\n]*'
right_arrow      ::= '->' space -> #first
mallet           ::= '::=' space -> #first
boolean          ::= true \
                   | false
true             ::= 'true\|on' space -> #true
false            ::= 'false\|off' space -> #false
equal            ::= '=' space -> #first
or               ::= '|' space -> #first
and              ::= '&' space -> #first
not              ::= '!' space -> #first
question         ::= '?' space -> #first
star             ::= '\*' space -> #first
plus             ::= '+' space -> #first
close            ::= ')' space -> #first
open             ::= '(' space -> #first
dot              ::= '\.'
space            ::= '\%(\s\|\\\n\)*'
eol              ::= comment ? '\%d10'-> #eol
eof              ::= '$'
