#!/usr/bin/env expect -f
#
# This Expect script was generated by autoexpect on Thu Jul 30 19:42:38 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1  ;# set to 1 to force conservative mode even if
;# script wasn't run conservatively originally
if {$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- $arg
    }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

proc compare_files {file1 file2} {
    set equal 0
    set fh1 [open $file1 r]
    set fh2 [open $file2 r]
    set equal [string equal [read $fh1] [read $fh2]]
    close $fh1
    close $fh2
    return $equal
}

proc read_file {file} {
    if {[catch {open $file r} fh]} {
        puts stderr "Could not open $file"
        exit 1
    }
    set string [read $fh]
    close $fh
    return $string
}

proc vim_to_normal {} {
    #send -- ""
    send -- ""
}

proc vim_reset_buffer {} {
    vim_to_normal
    exp_send -- ":%d_\r"
}

proc vim_write {filename} {
    vim_to_normal
    send -- ":w ${filename}\r"
    sleep .1
}

proc vim_reload_buffer {} {
    vim_to_normal
    exp_send -- ":e!\r"
}

proc vim_new_buffer {bufname} {
    vim_to_normal
    exp_send -- ":e! ${bufname}\r"
}

proc vim_insert {string} {
    send -- "i${string}"
}

proc vim_append {string} {
    send -- "a${string}"
}

proc vim_normal {string} {
    vim_to_normal
    send -- "${string}"
}

proc vim_ex {string} {
    vim_to_normal
    send -- ":${string}\r"
}

proc file2list {filename} {
    if {[catch {open $filename r} fd]} {
        puts stderr "Could not open $filename"
        exit 1
    }
    set list [split [string trim [read $fd]] "\n"]
    close $fd
    return $list
}

#set timeout -1
set timeout 2

set matchpairs {{( )} {"{" "}"} {[ ]} {< >} {Â¿ ?} {Â¡ !} {, :}}

set lines [file2list autoclose_matchpairs.txt]

set filename result.txt

set reload 0

spawn vim -T dumb -u _setup.vim
sleep 1
match_max 4000

expect -exact "type  :help version8<Enter>   for version info" {send -- ":w! foo\r"}
#expect {
#    -exact "version8<Enter>" {puts "Here!"}
#    #timeout exit
#}

sleep 1

        send -- ":w ${filename}\r"
        exit
foreach line $lines {
    puts $line
    if {[regexp {^#|^\s*$} $line]} {
    puts stderr "comment: $line"
        continue
    }
    if {[regexp -- {^[^"]} $line]} {
        #"
        puts stderr "ex: $line"
        vim_ex $line
        set reload 1
        continue
    }
    if {$reload} {
        vim_ex DelimitMateReload
        set reload 0
    }
    foreach matchpair $matchpairs {
        vim_reset_buffer
        set pair [regexp -inline -all -- {"(?:\\.|[^"\\])*"} $line];#"
        set ok [eval string cat [lindex $pair 1]]
        regsub -all -- {\(} [lindex $pair 0] [lindex $matchpair 0] input
        regsub -all -- {\)} $input  [lindex $matchpair 1] input
        set input [regexp -all -inline -- {\\["\\]|\\<[^>]+>|.} [lindex $pair 0]];#"
        set input [lrange $input 1 end-1]
        set buffer {}
        foreach item $input {
            if {[expr [string length $item] == 1]} {
                append buffer $item
            } elseif {[expr [string length $item] == 2]} {
                append buffer [string range $item 1 end]
            } else {
                regsub -all -- {\(} $item [lindex $matchpair 0] item
                regsub -all -- {\)} $item  [lindex $matchpair 1] item
                send -- $buffer
                set buffer {}
                exp_send $item
                sleep .1
            }
        }
        if {[string length $buffer]} {
            regsub -all -- {\(} $item [lindex $matchpair 0] item
            regsub -all -- {\)} $item  [lindex $matchpair 1] item
            send -- $buffer
            set buffer {}
        }
        vim_write bar
        sleep 1
        send -- ":w! ${filename}\r"
        sleep 1
        interactive
        set output [read_file $filename]
        if {[string equal $output $ok]} {

        } else {
        
        }
        break
    }
    break
}
vim_ex {quit!}
stty -raw
expect eof
